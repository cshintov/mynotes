<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 17 May 2020 14:15:53 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Configure gitlab webhook through API</title>
      <link>/post/2020-05-17-configure-gitlab-webhook-through-api/</link>
      <pubDate>Sun, 17 May 2020 14:15:53 +0000</pubDate>
      <guid>/post/2020-05-17-configure-gitlab-webhook-through-api/</guid>
      <description>Just as we can manage Jenkins with CLI, we can converniently interact with our gitlab server through its API.
When you have many microservices that needs CI which auto-triggers on git events, you might need webhooks configured for each project, may be even multiple hooks for the same project.
In case of Jenkins the gitlab plugin provides the webhook url for each pipeline we create.
We can avoid manually configuring webhooks each time a new pipeline is created if we use the API.</description>
    </item>
    <item>
      <title>Manage your Jenkins with CLI</title>
      <link>/post/2020-05-17-manage-jenkins-with-cli/</link>
      <pubDate>Sun, 17 May 2020 11:37:02 +0000</pubDate>
      <guid>/post/2020-05-17-manage-jenkins-with-cli/</guid>
      <description>Modern software is incredibly complex. That makes operations a hard job.
Architectures like microservices, increases the operational complexity multiple orders of magnitude. So, its crucial that every part of operations is automated. Because when adopting such patterns there is an explosion in the number of components that need to be maintained. Doing this manually is inefficient as well as painful for the engineers who are tasked to do the maintenance. One such area is managing your CI ojbects.</description>
    </item>
    <item>
      <title>Fun with fibonacci!</title>
      <link>/post/2020-05-08-fun-with-fibonacci/</link>
      <pubDate>Fri, 08 May 2020 22:12:42 +0000</pubDate>
      <guid>/post/2020-05-08-fun-with-fibonacci/</guid>
      <description>Prepare yourselves, ladies and gentlemen, for we&amp;rsquo;re diving into the depths of Fibonacci and the wonders of its mysteries!
The Fibonacci series. Ah, what a wonder it is! It&amp;rsquo;s more than just a series of numbers; it&amp;rsquo;s an elegant dance between digits, an encapsulation of the Golden Ratio, and a playground for coders to frolic in. We&amp;rsquo;re going to crack this nut wide open!
What&amp;rsquo;s the Fibonacci series, you ask? Imagine a series that builds upon itself, where each number is the sum of the two that came before it, like a winding staircase leading to infinity.</description>
    </item>
    <item>
      <title>Beautify your functions with decorators!</title>
      <link>/post/2019-11-03-decorators-in-python/</link>
      <pubDate>Sun, 03 Nov 2019 10:04:31 +0000</pubDate>
      <guid>/post/2019-11-03-decorators-in-python/</guid>
      <description>Hello coders! I&amp;rsquo;m going to take you on a magical journey through one of Python&amp;rsquo;s most enchanted features: Decorators. Oh yes, and believe me when I say, this isn&amp;rsquo;t your grandma&amp;rsquo;s interior design. We&amp;rsquo;re diving into a world where Python&amp;rsquo;s old-school functions get a mind-blowing, reality-altering, time-traveling facelift.
Now, let&amp;rsquo;s be real. We&amp;rsquo;ve all been there. You&amp;rsquo;re chugging away at your code, your function is doing exactly what it&amp;rsquo;s supposed to do, and life is just peachy.</description>
    </item>
  </channel>
</rss>
