<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>closure on </title>
    <link>/tags/closure/</link>
    <description>Recent content in closure on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Nov 2019 10:04:31 +0000</lastBuildDate>
    <atom:link href="/tags/closure/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Beautify your functions with decorators!</title>
      <link>/post/2019-11-03-decorators-in-python/</link>
      <pubDate>Sun, 03 Nov 2019 10:04:31 +0000</pubDate>
      <guid>/post/2019-11-03-decorators-in-python/</guid>
      <description>Hello coders! I&amp;rsquo;m going to take you on a magical journey through one of Python&amp;rsquo;s most enchanted features: Decorators. Oh yes, and believe me when I say, this isn&amp;rsquo;t your grandma&amp;rsquo;s interior design. We&amp;rsquo;re diving into a world where Python&amp;rsquo;s old-school functions get a mind-blowing, reality-altering, time-traveling facelift.
Now, let&amp;rsquo;s be real. We&amp;rsquo;ve all been there. You&amp;rsquo;re chugging away at your code, your function is doing exactly what it&amp;rsquo;s supposed to do, and life is just peachy.</description>
    </item>
  </channel>
</rss>
